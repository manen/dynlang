"
an iterator is just a plain object that has:
- len field: function returning a number
- next field: function returning the next element OR none
"

let iter = obj {
	from_array: fn(array) {
		let i = 0

		obj {
			len: fn() {
				array.len - i
			}
			next: fn() {
				let val = array.[i]
				i = i + 1
				val
			}
		}
	}
	from_obj: fn(obj) {
		let keys = builtins.obj_keys(obj)

		iter.map([
			iter.from_array(keys)
			fn(key) {
				[key obj.[key]]
			}
		])
	}
	from_range: fn(from_to) {
		let from = from_to.0
		let to = from_to.1

		let n = from

		obj {
			len: fn() { to - n }
			next: fn() {
				if n < to {
					n = n + 1
					n - 1
				} else {
					if 1 == 2 {
						true
					}
				}
			}
		}
	}
	repeat: fn(val_times) {
		let val = val_times.0
		let times = val_times.1

		let i = 0

		obj {
			len: fn() {
				times
			}
			next: fn() {
				if i < times {
					i = i + 1
					val
				}
			}
		}
	}
	once: fn(val) {
		iter.repeat([val 1])
	}
	increment: fn() {
		let n = 0

		obj {
			len: fn() { 10000000 }
			next: fn() {
				n = n + 1
				n - 1
			}
		}
	}

	take: fn(iter_max_len) {
		let iter = iter_max_len.0
		let max_len = iter_max_len.1

		let iter_len = iter.len()
		let len = if iter_len > max_len {
			max_len
		} else {
			iter_len
		}

		let taken = 0

		obj {
			len: fn() { len }
			next: fn() {
				if taken < max_len {
					taken = taken + 1
					iter.next()
				}
			}
		}
	}
	map: fn(iter_fn) {
		let iter = iter_fn.0
		let f = iter_fn.1

		obj {
			len: iter.len
			next: fn() {
				f(iter.next())
			}
		}
	}
	chain: fn(a_b) {
		let none = if 1 == 2 { 4 }

		let a = a_b.0
		let b = a_b.1

		obj {
			len: fn() {
				a.len() + b.len()
			}
			next: fn() {
				let a_next = a.next()
				if a_next == none {
					b.next()
				} else {
					a_next
				}
			}
		}
	}

	protect: fn(this) {
		iter.take([this this.len()])
	}

	for_each: fn(iter_fn) {
		let iter = iter_fn.0
		let f = iter_fn.1

		for next in iter {
			f(next)
		}
	}
	collect: fn(iter) {
		let arr = []

		for next in iter {
			arr = arr + [next]
		}

		arr
	}
}
