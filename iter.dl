"
an iterator is just a plain object that has:
- len field: function returning a number
- next field: function returning the next element OR none
"

let iter = obj {
	from_array: fn(array) {
		let i = 0

		obj {
			len: fn() {
				array.len - i
			}
			next: fn() {
				let val = array.[i]
				i = i + 1
				val
			}
		}
	}
	from_range: fn(from_to) {
		let from = from_to.0
		let to = from_to.1

		let n = from

		obj {
			len: fn() { to - n }
			next: fn() {
				if n < to {
					n = n + 1
					n - 1
				} else {
					if 1 == 2 {
						true
					}
				}
			}
		}
	}
	increment: fn() {
		let n = 0

		obj {
			len: fn() { 10000000 }
			next: fn() {
				n = n + 1
				n - 1
			}
		}
	}

	take: fn(iter_max_len) {
		let iter = iter_max_len.0
		let max_len = iter_max_len.1

		let iter_len = iter.len()
		let len = if iter_len > max_len {
			max_len
		} else {
			iter_len
		}

		let taken = 0

		obj {
			len: fn() { len }
			next: fn() {
				if taken < max_len {
					taken = taken + 1
					iter.next()
				}
			}
		}
	}

	collect: fn(iter) {
		let none = if 0 == 1 { 69 }

		let arr = []

		loop {
			let next = iter.next()
			if next == none {
				break
			} else {
				arr = arr + [next]
			}
		}

		arr
	}
}
