"
an iterator is just a plain object that has:
- len field: function returning a number
- next field: function returning the next element OR none
"

let iter_from_array = fn(array) {
	let i = 0

	obj {
		len: fn() {
			array.len - i
		}
		next: fn() {
			let val = array.[i]
			i = i + 1
			val
		}
	}
}

let iter_from_range = fn(from_to) {
	let from = from_to.0
	let to = from_to.1

	let n = from

	obj {
		len: fn() { to - n }
		next: fn() {
			if n < to {
				n = n + 1
				n - 1
			} else {
				if 1 == 2 {
					true
				}
			}
		}
	}
}

let array_from_iter = fn(iter) {
	let none = if 0 == 1 { 69 }

	let arr = []

	"loops would be nice finally cause a function like this just can't be recursive"
}
